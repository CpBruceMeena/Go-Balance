{"ast":null,"code":"import axios from'axios';const API_BASE_URL='http://localhost:8080/api';export const clusterService={async getClusters(){const response=await axios.get(\"\".concat(API_BASE_URL,\"/clusters\"));return response.data;},async createCluster(name){const response=await axios.post(\"\".concat(API_BASE_URL,\"/clusters\"),{name});return response.data;},async deleteCluster(clusterId){await axios.delete(\"\".concat(API_BASE_URL,\"/clusters/\").concat(clusterId));},async addNode(clusterId,url,healthCheckUrl){const response=await axios.post(\"\".concat(API_BASE_URL,\"/clusters/\").concat(clusterId,\"/nodes\"),{url,healthCheckUrl});return response.data.node;},async deleteNode(clusterId,nodeId){await axios.delete(\"\".concat(API_BASE_URL,\"/clusters/\").concat(clusterId,\"/nodes/\").concat(nodeId));},async checkNodeHealth(clusterId,nodeId){const response=await axios.get(\"\".concat(API_BASE_URL,\"/clusters/\").concat(clusterId,\"/nodes/\").concat(nodeId,\"/health\"));return response.data;},async updateClusterAlgorithm(clusterId,algorithm){const response=await axios.put(\"\".concat(API_BASE_URL,\"/clusters/\").concat(clusterId,\"/algorithm\"),{algorithm});return response.data;}};","map":{"version":3,"names":["axios","API_BASE_URL","clusterService","getClusters","response","get","concat","data","createCluster","name","post","deleteCluster","clusterId","delete","addNode","url","healthCheckUrl","node","deleteNode","nodeId","checkNodeHealth","updateClusterAlgorithm","algorithm","put"],"sources":["/Users/sandeep.mehta/Documents/AdhocProjects/Go-Balance/frontend/src/services/clusterService.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8080/api';\n\nexport interface Node {\n  id: string;\n  url: string;\n  isActive: boolean;\n  healthStatus: 'healthy' | 'unhealthy' | 'unknown';\n  lastChecked: string;\n}\n\nexport interface Cluster {\n  id: string;\n  name: string;\n  nodes: Node[];\n  algorithm: 'round-robin' | 'least-connections' | 'weighted-round-robin';\n}\n\nexport const clusterService = {\n  async getClusters(): Promise<Cluster[]> {\n    const response = await axios.get<Cluster[]>(`${API_BASE_URL}/clusters`);\n    return response.data;\n  },\n\n  async createCluster(name: string): Promise<Cluster> {\n    const response = await axios.post<Cluster>(`${API_BASE_URL}/clusters`, { name });\n    return response.data;\n  },\n\n  async deleteCluster(clusterId: string): Promise<void> {\n    await axios.delete(`${API_BASE_URL}/clusters/${clusterId}`);\n  },\n\n  async addNode(clusterId: string, url: string, healthCheckUrl: string): Promise<Node> {\n    const response = await axios.post<{ node: Node }>(`${API_BASE_URL}/clusters/${clusterId}/nodes`, {\n      url,\n      healthCheckUrl,\n    });\n    return response.data.node;\n  },\n\n  async deleteNode(clusterId: string, nodeId: string): Promise<void> {\n    await axios.delete(`${API_BASE_URL}/clusters/${clusterId}/nodes/${nodeId}`);\n  },\n\n  async checkNodeHealth(clusterId: string, nodeId: string): Promise<Node> {\n    const response = await axios.get<Node>(`${API_BASE_URL}/clusters/${clusterId}/nodes/${nodeId}/health`);\n    return response.data;\n  },\n\n  async updateClusterAlgorithm(clusterId: string, algorithm: Cluster['algorithm']): Promise<Cluster> {\n    const response = await axios.put<Cluster>(`${API_BASE_URL}/clusters/${clusterId}/algorithm`, { algorithm });\n    return response.data;\n  },\n}; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,KAAM,CAAAC,YAAY,CAAG,2BAA2B,CAiBhD,MAAO,MAAM,CAAAC,cAAc,CAAG,CAC5B,KAAM,CAAAC,WAAWA,CAAA,CAAuB,CACtC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAJ,KAAK,CAACK,GAAG,IAAAC,MAAA,CAAeL,YAAY,aAAW,CAAC,CACvE,MAAO,CAAAG,QAAQ,CAACG,IAAI,CACtB,CAAC,CAED,KAAM,CAAAC,aAAaA,CAACC,IAAY,CAAoB,CAClD,KAAM,CAAAL,QAAQ,CAAG,KAAM,CAAAJ,KAAK,CAACU,IAAI,IAAAJ,MAAA,CAAaL,YAAY,cAAa,CAAEQ,IAAK,CAAC,CAAC,CAChF,MAAO,CAAAL,QAAQ,CAACG,IAAI,CACtB,CAAC,CAED,KAAM,CAAAI,aAAaA,CAACC,SAAiB,CAAiB,CACpD,KAAM,CAAAZ,KAAK,CAACa,MAAM,IAAAP,MAAA,CAAIL,YAAY,eAAAK,MAAA,CAAaM,SAAS,CAAE,CAAC,CAC7D,CAAC,CAED,KAAM,CAAAE,OAAOA,CAACF,SAAiB,CAAEG,GAAW,CAAEC,cAAsB,CAAiB,CACnF,KAAM,CAAAZ,QAAQ,CAAG,KAAM,CAAAJ,KAAK,CAACU,IAAI,IAAAJ,MAAA,CAAoBL,YAAY,eAAAK,MAAA,CAAaM,SAAS,WAAU,CAC/FG,GAAG,CACHC,cACF,CAAC,CAAC,CACF,MAAO,CAAAZ,QAAQ,CAACG,IAAI,CAACU,IAAI,CAC3B,CAAC,CAED,KAAM,CAAAC,UAAUA,CAACN,SAAiB,CAAEO,MAAc,CAAiB,CACjE,KAAM,CAAAnB,KAAK,CAACa,MAAM,IAAAP,MAAA,CAAIL,YAAY,eAAAK,MAAA,CAAaM,SAAS,YAAAN,MAAA,CAAUa,MAAM,CAAE,CAAC,CAC7E,CAAC,CAED,KAAM,CAAAC,eAAeA,CAACR,SAAiB,CAAEO,MAAc,CAAiB,CACtE,KAAM,CAAAf,QAAQ,CAAG,KAAM,CAAAJ,KAAK,CAACK,GAAG,IAAAC,MAAA,CAAUL,YAAY,eAAAK,MAAA,CAAaM,SAAS,YAAAN,MAAA,CAAUa,MAAM,WAAS,CAAC,CACtG,MAAO,CAAAf,QAAQ,CAACG,IAAI,CACtB,CAAC,CAED,KAAM,CAAAc,sBAAsBA,CAACT,SAAiB,CAAEU,SAA+B,CAAoB,CACjG,KAAM,CAAAlB,QAAQ,CAAG,KAAM,CAAAJ,KAAK,CAACuB,GAAG,IAAAjB,MAAA,CAAaL,YAAY,eAAAK,MAAA,CAAaM,SAAS,eAAc,CAAEU,SAAU,CAAC,CAAC,CAC3G,MAAO,CAAAlB,QAAQ,CAACG,IAAI,CACtB,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}